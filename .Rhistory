# Cargar librerías necesarias
library(ggplot2)
library(dplyr)
library(lubridate) # Fechas
library(gridExtra) # Para hacer grids
# Cargar el dataset
df <- read.csv("C:/Users/diego/Documents/Proyectos de datos/Datos_csv/Retail_Transaction_Dataset.csv")
# Ver las primeras filas del dataset
head(df)
# Verificar valores faltantes en las columnas seleccionadas
missing_values <- colSums(is.na(df[, c("TransactionDate", "Price", "Quantity", "TotalAmount")]))
print(missing_values)
# Mostrar las filas por si hubiera alguna
df_with_na <- df %>% filter(is.na(TransactionDate) | is.na(Price) | is.na(Quantity) | is.na(TotalAmount))
print(df_with_na)
# Convertimos las fechas utilizando el formato correcto:
df$TransactionDate <- mdy_hm(df$TransactionDate)
# Mostrar las primeras filas para verificar las fechas convertidas
head(df$TransactionDate)
# ¿Hay filas que pudieron no convertirse?
incorrect_dates <- df[is.na(df$TransactionDate),]
print(incorrect_dates)
# ¿Price y Quantity numéricos?
print(is.numeric(df$Price))
print(is.numeric(df$Quantity))
# Por si acaso
df$Price <- as.numeric(df$Price)
df$Quantity <- as.numeric(df$Quantity)
# Que valores toman estas dos columnas
unique(df$ProductCategory)
unique(df$PaymentMethod)
# Empleando la función "trimws" eliminariamos los espacios en blanco al principio y al final.
df$ProductCategory <- trimws(df$ProductCategory)
df$PaymentMethod <- trimws(df$PaymentMethod)
# Gráfico de barras de ventas por categoría de producto
ggplot(df, aes(x = ProductCategory)) +
geom_bar(fill = "steelblue") +
labs(title = "Distribución de transacciones por categoría de producto",
x = "Categoría de Producto",
y = "Número de Transacciones") +
theme_minimal()
# Transacciones por tipo de producto
df_category <- df %>%
count(ProductCategory) %>%
mutate(percentage = n / sum(n) * 100)
# Gráfico de sectores
ggplot(df_category, aes(x = "", y = percentage, fill = ProductCategory)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Distribución de transacciones por categoría de producto",
x = "Producto",
y = "Porcentaje",
fill = "Categoría de Producto") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5),
color = "black", size = 4) +
scale_fill_brewer(palette = "Set3") +
theme_minimal() +
theme(axis.text.x = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
# Transacciones por día
df_transactions_per_day <- df %>%
count(TransactionDate)
ggplot(df_transactions_per_day, aes(x = TransactionDate, y = n, group = 1)) +
geom_line(color = "steelblue", linewidth = 1) +
labs(title = "Número de transacciones por día",
y = "Número de Transacciones") +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank())
# Mes de TransactionDate
df$Month <- format(df$TransactionDate, "%Y-%m")  # Formato Año-Mes
# Transacciones por mes
df_transactions_per_month <- df %>%
count(Month)
ggplot(df_transactions_per_month, aes(x = Month, y = n, group = 1)) +
geom_line(color = "steelblue", linewidth = 1) +
labs(title = "Número de transacciones por mes",
y = "Número de Transacciones",
x = "Mes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Contar las transacciones por día
df_transactions_per_day <- df %>%
count(TransactionDate)
# Crear gráfico de líneas
ggplot(df_transactions_per_day, aes(x = TransactionDate, y = n, group = 1)) +
geom_line(color = "steelblue", linewidth = 1) +
labs(title = "Número de transacciones por día",
y = "Número de Transacciones") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Ocultar etiquetas del eje x
axis.title.x = element_blank())   # Eliminar el título del eje x
# Contar el número de transacciones por día
df_transactions_per_day <- df %>%
count(TransactionDate)
# Crear gráfico de líneas con puntos
ggplot(df_transactions_per_day, aes(x = TransactionDate, y = n, group = 1)) +
geom_line(color = "steelblue", linewidth = 1) +
geom_point(color = "red", size = 2) +  # Añadir puntos en cada valor de la línea
labs(title = "Número de transacciones por día",
y = "Número de Transacciones") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Ocultar etiquetas del eje x
axis.title.x = element_blank())
# Filtrar los datos solo para, por ejemplo, el Q2.
df_filtered <- df %>%
filter(format(TransactionDate, "%Y-%m") %in% c("2023-05", "2023-06", "2023-07", "2023-08"))
df_filtered$Week <- format(df_filtered$TransactionDate, "%Y-%U")
# Transacciones por semana
df_transactions_per_week <- df_filtered %>%
count(Week)
ggplot(df_transactions_per_week, aes(x = Week, y = n, group = 1)) +
geom_line(color = "steelblue", linewidth = 1) +
labs(title = "Número de transacciones por semana Q2",
y = "Número de Transacciones",
x = "Semana") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Cargar librerías necesarias
library(ggplot2)
library(dplyr)
library(lubridate) # Fechas
library(gridExtra) # Para hacer grids
# Cargar el dataset
df <- read.csv("C:/Users/diego/Documents/Proyectos de datos/Datos_csv/Retail_Transaction_Dataset.csv")
# Ver las primeras filas del dataset
head(df)
# Verificar valores faltantes en las columnas seleccionadas
missing_values <- colSums(is.na(df[, c("TransactionDate", "Price", "Quantity", "TotalAmount")]))
print(missing_values)
# Mostrar las filas por si hubiera alguna
df_with_na <- df %>% filter(is.na(TransactionDate) | is.na(Price) | is.na(Quantity) | is.na(TotalAmount))
print(df_with_na)
# Convertimos las fechas utilizando el formato correcto:
df$TransactionDate <- mdy_hm(df$TransactionDate)
# Mostrar las primeras filas para verificar las fechas convertidas
head(df$TransactionDate)
# ¿Hay filas que pudieron no convertirse?
incorrect_dates <- df[is.na(df$TransactionDate),]
print(incorrect_dates)
# ¿Price y Quantity numéricos?
print(is.numeric(df$Price))
print(is.numeric(df$Quantity))
# Por si acaso
df$Price <- as.numeric(df$Price)
df$Quantity <- as.numeric(df$Quantity)
# Que valores toman estas dos columnas
unique(df$ProductCategory)
unique(df$PaymentMethod)
# Empleando la función "trimws" eliminariamos los espacios en blanco al principio y al final.
df$ProductCategory <- trimws(df$ProductCategory)
df$PaymentMethod <- trimws(df$PaymentMethod)
# Gráfico de barras de ventas por categoría de producto
ggplot(df, aes(x = ProductCategory)) +
geom_bar(fill = "steelblue") +
labs(title = "Distribución de transacciones por categoría de producto",
x = "Categoría de Producto",
y = "Número de Transacciones") +
theme_minimal()
# Transacciones por tipo de producto
df_category <- df %>%
count(ProductCategory) %>%
mutate(percentage = n / sum(n) * 100)
# Gráfico de sectores
ggplot(df_category, aes(x = "", y = percentage, fill = ProductCategory)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Distribución de transacciones por categoría de producto",
x = "Producto",
y = "Porcentaje",
fill = "Categoría de Producto") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5),
color = "black", size = 4) +
scale_fill_brewer(palette = "Set3") +
theme_minimal() +
theme(axis.text.x = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
# Transacciones por día
df_transactions_per_day <- df %>%
count(TransactionDate)
ggplot(df_transactions_per_day, aes(x = TransactionDate, y = n, group = 1)) +
geom_line(color = "steelblue", linewidth = 1) +
labs(title = "Número de transacciones por día",
y = "Número de Transacciones") +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank())
knitr::purl("Análisis_Básico_Transacciones.Rmd", "proyecto.R")
